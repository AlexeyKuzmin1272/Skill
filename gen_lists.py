squares = [i**2 for i in range(1,11)]
print(squares)
squares1 = [i**2 for i in range(1,11) if i % 2 == 1]
print(squares1)
#----------------------------------------------
#При помощи генератора списков создайте таблицу умножения чисел от 1 до 10
m_table = [[i*j for j in range(1,11)] for i in range(1,11)]
print(m_table)
#----------------------------------------------
L = [input() for i in range(5)]

L = [int(input()) for i in range(5)]
print(L)
#---------------------------------------------- \
import locale
x = '12'
print(locale.localeconv().get('decimal_point'))
print(locale.atoi(x))
print(locale.atof(x))
#----------------------------------------------
squares = [i**2 for i in range(1,11)]
print(squares)
squares1 = [i**2 for i in range(1,11) if i % 2 == 1]
print(squares1)

#----------------------------------------------
#При помощи генератора списков создайте таблицу умножения чисел от 1 до 10
max_n = 8
m_table = [[i*j for j in range(1,max_n + 1)] for i in range(1,max_n + 1)]
#print(m_table)
# динамический шаблон формата float
for j in range(1,11): #max_n + 1):
    for i in range(1,max_n + 1):
        s = '{:2} x {:2} = {:2}'.format(j,i, i*j)
        print(s, end = '   ')
    print('', end = '\n')    
        
#num = "{:{align}{width}.{precision}f}"

# передача кодов формата в качестве аргументов
#print("{:{align}{width}.{precision}f}".format(123.236, align='<', width=8, precision=2))

#print("{:2d}".format(m_table[0]))
#for n in enumerate(m_table, 1):
#    print ("{:2d}".format(n))
#print('----------------------------')
#print(fill(str(m_table), width=10) )

#----------------------------------------------
print('{:2}:{:2}'.format(1, 2))
#----------------------------------------------
M = [[i+j for j in range(5)] for i in range(5)]
print(M)
#----------------------------------------------
T = [[i*j for j in range(1,11)] for i in range(1,11)]
print(T)
#----------------------------------------------
#print(33 % 2 == 1)
T = [[i * j % 2 == 1 for j in range(1,11)] for i in range(1,11)]
print(T)
#----------------------------------------------
L = [int(input()) for i in range(5)]
print(L)
#----------------------------------------------
#Модифицируйте последний пример таким образом, чтобы в список сохранялось 
#True, если элемент чётный, и False, если элемент нечётный.
L = [int(input()) % 2 == 0 for i in range(2)]
print(L)
#----------------------------------------------
#Замените знаки «?» таким образом, чтобы программа выводила True, если есть хотя бы одно чётное число.
L = [int(input()) % 2 == 0 for i in range(2)]
print( any(L))
#----------------------------------------------
# его результат будет истинным тогда и только тогда, 
# когда в списке есть хотя бы один чётный и хотя бы один нечётный элемент.
L = [int(input()) % 2 == 0 for i in range(2)]
print(any(L) and not all(L))
#----------------------------------------------
L = [i for i in range(10)]
# 0 1 2 3 4 5 6 7 8 9
M = [i for i in range(10,0,-1)]
# 10 9 8 7 6 5 4 3 2 1
for a, b in zip(L,M):
    print('a =', a, ',  b =', b)
#----------------------------------------------
#Используя функцию zip() внутри генераторов списков, вычислите поэлементные произведения списков L и M.
L = [i for i in range(10)]
M = [i for i in range(10,0,-1)]

for a, b in zip(L,M):
    print('a x b =', a*b)

N = [a*b for a,b in zip(L,M)]
print(N)
#----------------------------------------------
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]    # Пусть у нас есть исходный список
list_b = [x for x in list_a]           # Создадим новый список используя генератор списка
print(list_b)                          # [-2, -1, 0, 1, 2, 3, 4, 5]
print(list_a is list_b)                # False - это разные объекты!

#----------------------------------------------
 # if x % 2 == 0 - остаток от деления на 2 равен нулю - число четное
list_a = [-2, -1, 0, 1, 2, 3, 4, 5] 
list_b = [x for x in list_a if x % 2 == 0]
print(list_b)   # [-2, 0, 2, 4]
#----------------------------------------------
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x for x in list_a if x % 2 == 0 and x > 0]
# берем те x, которые одновременно четные и больше нуля
print(list_b)   # [2, 4]
#----------------------------------------------
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x**2 for x in list_a]
print(list_b)   # [4, 1, 0, 1, 4, 9, 16, 25]

#----------------------------------------------
list_a = ['a', 'abc', 'abcde']
list_b = [len(x) for x in list_a]
print(list_b)   # [1, 3, 5]
#----------------------------------------------
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x if x < 0 else x**2 for x in list_a]
# Если x-отрицательное - берем x, в остальных случаях - берем квадрат x
print(list_b)   # [-2, -1, 0, 1, 4, 9, 16, 25]
#----------------------------------------------
#Никто не запрещает комбинировать фильтрацию и ветвление:

list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
list_b = [x**3 if x < 0 else x**2 for x in list_a if x % 2 == 0]
# вначале фильтр пропускает в выражение только четные значения
# после этого ветвление в выражении для отрицательных возводит в куб, а для остальных в квадрат
print(list_b)   # [-8, 0, 4, 16]
#----------------------------------------------
numbers = range(10)

# Before
squared_evens = [n ** 2 for n in numbers if n % 2 == 0]

# After
squared_evens = [
    n ** 2
    for n in numbers
    if n % 2 == 0
]
squared_evens
#----------------------------------------------
#Для примера возьмем простую задачу — сделаем из списка чисел список квадратов четных чисел и решим ее
#с помощью трех разных подходов:

#3.1 Решение с помощью генератора списка

numbers = range(10)
squared_evens = [n ** 2 for n in numbers if n % 2 == 0]
print(squared_evens)   # [0, 4, 16, 36, 64]

#3.2. Решение c помощью цикла for
#Важно: Каждый генератор выражений можно переписать в виде цикла for, но не каждый цикл for можно представить в
#виде такого выражения.

numbers = range(10)
squared_evens = []
for n in numbers:
    if n % 2 == 0:
        squared_evens.append(n ** 2)
print(squared_evens)   # [0, 4, 16, 36, 64]

#В целом, для очень сложных и комплексных задач, решение в виде цикла может быть понятней и проще 
#поддержке и доработке. Для более простых задач, синтаксис выражения-генератора будет компактней и легче в чтении.

#3.3. Решение с помощью функций.

#Для начала, замечу, что выражение генераторы и генераторы коллекций — это тоже функциональный стиль, 
#но более новый и предпочтительный.
#Можно применять и более старые функциональные подходы для решения тех же задач, комбинируя map(), lambda и filter().

numbers = range(10)
squared_evens = map(lambda n: n ** 2, filter(lambda n: n % 2 == 0, numbers))
print(squared_evens)         # <map object at 0x7f661e5dba20>
print(list(squared_evens))   # [0, 4, 16, 36, 64]
# Примечание: в Python 2 в переменной squared_evens окажется сразу список, 
#а в Python 3 «map object», который мы превращаем в список с помощью list()

#Несмотря на то, что подобный пример вполне рабочий, читается он тяжело и использование синтаксиса генераторов 
#выражений будет более предпочительным и понятным.

#----------------------------------------------
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_gen = (i for i in list_a)    # выражение-генератор
print(next(my_gen))     # -2 - получаем очередной элемент генератора
print(next(my_gen))     # -1 - получаем очередной элемент генератора
#----------------------------------------------
#Особенности выражений-генераторов

#Генаратор нельзя писать без скобок — это синтаксическая ошибка.
# my_gen = i for i in list_a      # SyntaxError: invalid syntax

#При передаче в функцию дополнительные скобки необязательны
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_sum = sum(i for i in list_a)
# my_sum = sum((i for i in list_a))  # так тоже можно
print(my_sum)   # 12

#Нельзя получить длину функцией len()
# my_len = len(i for i in list_a)  # TypeError: object of type 'generator' has no len()

#Нельзя распечатать элементы функцией print()
print(my_gen)   # <generator object <genexpr> at 0x7f162db32af0>

#Обратите внимание, что после прохождения по выражению-генератору оно остается пустым!
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_gen = (i for i in list_a)
print(sum(my_gen))  # 12
print(sum(my_gen))  # 0

#Выражение-генератор может быть бесконечным.
import itertools
inf_gen = (x for x in itertools.count())  # бесконечный генератор от 0 to бесконечности!
#Будьте осторожны в работе с такими генераторами, так как при не правильном использовании «эффект» будет как от бесконечного цикла.

#К выражению-генератору не применимы срезы!
list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_gen = (i for i in list_a)
my_gen_sliced = my_gen[1:3]
# TypeError: 'generator' object is not subscriptable

#----------------------------------------------

#----------------------------------------------
#----------------------------------------------
#----------------------------------------------
#----------------------------------------------
#----------------------------------------------
#----------------------------------------------
