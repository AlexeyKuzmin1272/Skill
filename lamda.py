D:\python\study\lamda.pyL = ['THIS', 'IS', 'LOWER', 'STRING']
print(list(map(str.lower,L)))  
#--------------------------------------------------\
# Из заданного списка вывести только положительные элементы
def positive(x):
    return x > 0  # функция возвращает только True или False

result = filter(positive, [-2, -1, 0, 1, -3, 2, -3])

# Возвращается итератор, т.е. перечисляйте или приводите к списку
print(list(result))   # [1, 2]

#--------------------------------------------------\
#Отфильтруйте из заданного списка только чётные элементы.

def even(x):
    return x % 2 == 0 # функция возвращает только True или False

result = filter(even, [-2, -1, 0, 1, -3, 2, -3])

# Возвращается итератор, т.е. перечисляйте или приводите к списку
print(list(result))   # [1, 2]
#--------------------------------------------------\

# map + filter
some_list = [i - 10 for i in range(20)]
def pow2(x): return x**2
def positive(x): return x > 0

print(some_list)
print(list(map(pow2, filter(positive, some_list))))

[i**2 for i in some_list if i > 0]
#--------------------------------------------------\
#Передачей готового выражения-генератора присвоенного переменной в функцию создания коллекции.

list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_gen = (i for i in list_a)   # выражение-генератор
my_list = list(my_gen) 
print(my_list)          # [-2, -1, 0, 1, 2, 3, 4, 5]

#Написание выражения-генератора сразу внутри скобок вызываемой функции создания коллекции.

list_a = [-2, -1, 0, 1, 2, 3, 4, 5]
my_list = list(i for i in list_a)
print(my_list)          # [-2, -1, 0, 1, 2, 3, 4, 5]

# кортеж
my_tuple = tuple(i for i in list_a)
print(my_tuple)         # (-2, -1, 0, 1, 2, 3, 4, 5)

# множество
my_set = set(i for i in list_a)
print(my_set)           # {0, 1, 2, 3, 4, 5, -1, -2}

# неизменное множество
my_frozenset = frozenset(i for i in list_a)
print(my_frozenset)     # frozenset({0, 1, 2, 3, 4, 5, -1, -2})
#--------------------------------------------------\
d = {2 : "c", 1 : "d", 4 : "a", 3 : "b"}

# Чтобы отсортировать его по ключам, нужно сделать так
print(dict(sorted(d.items())))  
# {1: 'd', 2: 'c', 3: 'b', 4: 'a'}

print(sorted(d.items()))  
#[(1, 'd'), (2, 'c'), (3, 'b'), (4, 'a')]

# сортировка по значению словаря
sorted(d.items(), key=lambda x: x[1])  
#[(4, 'a'), (3, 'b'), (2, 'c'), (1, 'd')]
#--------------------------------------------------\
#Предположим у нас есть список с данными о росте и весе людей. 
#Задача — отсортировать их по индексу массы тела. 
#Он вычисляется по формуле: свой рост в метрах возвести в квадрат, потом массу тела в килограммах 
#разделить на полученную цифру.

# (вес, рост)
data = [
   (82, 191),
   (68, 174),
   (90, 189),
   (73, 179),
   (76, 184)
]
print(data)                             # список, как задан
print(sorted(data))                     # сортировка по ключу (x[0])
print(sorted(data, key=lambda x: x[1])) # сортировка по значению
print(sorted(data, key=lambda x: (x[0]/(x[1] **2)))) # сортировка по индексу масссы 
#--------------------------------------------------\
#Из списка в предыдущем задании найдите кортеж с минимальным индексом массы тела.
# (вес, рост)
data = [
   (82, 191),
   (68, 174),
   (90, 189),
   (73, 179),
   (76, 184)
]
print(sorted(data)[0]) # с минимальной массой
print(sorted(data, key=lambda x: (x[0]/(x[1] **2)))[0])  #с минимальным индексом массы тела
#--------------------------------------------------\
#Замените знаки «?» корректным выражением, чтобы вывести длину каждого элемента в списке.

a = ["asd", "bbd", "ddfa", "mcsa"]

print ([len(s) for s in a])
#--------------------------------------------------\
#Переведите все строки из списка в верхний регистр (заглавные буквы).

a = ["это", "маленький", "текст", "обидно"]
""" это комментарии???"""
print( list(map(str.upper, a)) )

#--------------------------------------------------\
#--------------------------------------------------\
#--------------------------------------------------\
#--------------------------------------------------\
#--------------------------------------------------\
